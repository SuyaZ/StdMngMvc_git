// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using StdMngMvc.Data;

#nullable disable

namespace StdMngMvc.Migrations
{
    [DbContext(typeof(SchoolContext))]
    [Migration("20241217070208_InitDB")]
    partial class InitDB
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("StdMngMvc.Models.Course", b =>
                {
                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<int>("CCredit")
                        .HasColumnType("int");

                    b.Property<string>("CourseName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("DepartmentID")
                        .HasColumnType("int");

                    b.Property<int?>("PreCourseID")
                        .HasColumnType("int");

                    b.HasKey("CourseID");

                    b.HasIndex("DepartmentID");

                    b.HasIndex("PreCourseID");

                    b.ToTable("Course", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.Department", b =>
                {
                    b.Property<int>("DepartmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DepartmentID"));

                    b.Property<string>("DepartmentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .IsRequired()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("TeacherID")
                        .HasColumnType("int");

                    b.Property<int>("Tuition")
                        .HasColumnType("int");

                    b.HasKey("DepartmentID");

                    b.HasIndex("TeacherID")
                        .IsUnique()
                        .HasFilter("[TeacherID] IS NOT NULL");

                    b.ToTable("Department", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.Enrollment", b =>
                {
                    b.Property<int>("StudentID")
                        .HasColumnType("int");

                    b.Property<int>("CourseID")
                        .HasColumnType("int");

                    b.Property<decimal>("Grade")
                        .HasColumnType("decimal(9,2)");

                    b.HasKey("StudentID", "CourseID");

                    b.HasIndex("CourseID");

                    b.ToTable("Enrollment", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.OfficeAssignment", b =>
                {
                    b.Property<int>("TeacherID")
                        .HasColumnType("int");

                    b.Property<string>("Location")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("TeacherID");

                    b.ToTable("OfficeAssignment", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.Person", b =>
                {
                    b.Property<int>("ID")
                        .HasColumnType("int");

                    b.Property<DateTime>("Birth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasMaxLength(2)
                        .HasColumnType("nvarchar(2)");

                    b.Property<string>("IDNums")
                        .IsRequired()
                        .HasMaxLength(18)
                        .HasColumnType("nvarchar(18)");

                    b.Property<string>("ImageURL")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("ID");

                    b.ToTable("Person", (string)null);

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("StdMngMvc.Models.Student", b =>
                {
                    b.HasBaseType("StdMngMvc.Models.Person");

                    b.Property<string>("Memo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.ToTable("Student", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.Teacher", b =>
                {
                    b.HasBaseType("StdMngMvc.Models.Person");

                    b.Property<int>("Title")
                        .HasColumnType("int");

                    b.ToTable("Teacher", (string)null);
                });

            modelBuilder.Entity("StdMngMvc.Models.Course", b =>
                {
                    b.HasOne("StdMngMvc.Models.Department", "Department")
                        .WithMany("Course")
                        .HasForeignKey("DepartmentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StdMngMvc.Models.Course", "PreCourse")
                        .WithMany("FollowCourses")
                        .HasForeignKey("PreCourseID");

                    b.Navigation("Department");

                    b.Navigation("PreCourse");
                });

            modelBuilder.Entity("StdMngMvc.Models.Department", b =>
                {
                    b.HasOne("StdMngMvc.Models.Teacher", "Administrator")
                        .WithOne("Department")
                        .HasForeignKey("StdMngMvc.Models.Department", "TeacherID");

                    b.Navigation("Administrator");
                });

            modelBuilder.Entity("StdMngMvc.Models.Enrollment", b =>
                {
                    b.HasOne("StdMngMvc.Models.Course", "Course")
                        .WithMany("Enrollments")
                        .HasForeignKey("CourseID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("StdMngMvc.Models.Student", "Student")
                        .WithMany("Enrollments")
                        .HasForeignKey("StudentID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Course");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("StdMngMvc.Models.OfficeAssignment", b =>
                {
                    b.HasOne("StdMngMvc.Models.Teacher", "Teacher")
                        .WithOne("OfficeAssignment")
                        .HasForeignKey("StdMngMvc.Models.OfficeAssignment", "TeacherID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("StdMngMvc.Models.Student", b =>
                {
                    b.HasOne("StdMngMvc.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("StdMngMvc.Models.Student", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StdMngMvc.Models.Teacher", b =>
                {
                    b.HasOne("StdMngMvc.Models.Person", null)
                        .WithOne()
                        .HasForeignKey("StdMngMvc.Models.Teacher", "ID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("StdMngMvc.Models.Course", b =>
                {
                    b.Navigation("Enrollments");

                    b.Navigation("FollowCourses");
                });

            modelBuilder.Entity("StdMngMvc.Models.Department", b =>
                {
                    b.Navigation("Course");
                });

            modelBuilder.Entity("StdMngMvc.Models.Student", b =>
                {
                    b.Navigation("Enrollments");
                });

            modelBuilder.Entity("StdMngMvc.Models.Teacher", b =>
                {
                    b.Navigation("Department")
                        .IsRequired();

                    b.Navigation("OfficeAssignment")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
